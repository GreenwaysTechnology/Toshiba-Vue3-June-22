			        Vue
.....................................................................................

Software setup:

1.node js
2.vs code

Pre Knowledge:

1.HTML 5
3.CSS 3 && Any css framework
4.Strong knowledge on Javascript
  -ES 6

What is Vue or Vue.js?
 
  Vue.js is javascript framework for building client side web applications using html 5,css3 ,javascript.


                                 E6 Features


What is java script?
 
 Java script is programming language.
 
 Java script is Object based, functional style, event driven programming language.

Why Java script was created?
  
  For Web computing.

Web Computing Models:
1.static web - 1989 -to 1995
2.Dynamic web - 1996 - till date
   Preparing html pages on fly by comibing data from the database
  CGI-Perl/c
  J2EE- Servlets
  ASP
  PHP
3.WebServices - 1998 - till date
   Send data in the form of documents instead of html documents
   Clients will decide how to use the data.
   SOAP
   REST
4.Single Page Web Apps(SPA)2008 to till date
   Client side web apps built using pure javascript,html,css
   Emberjs
   Angular js
   React
   Vue.js

Java script was created for manipulating web documents(html) inside web browser.
  All Browser based apps called DOM programming is done using js.
  All User interface tech based on javascript.

Now javascript is every where, in the client side,server side,devices,mobile app etc...

Versions of javascript:

The js was created in 1995, available to public 1996 after standarization by ECMA committee

ES /JS 1.0 --1997
ES 3 -1999
 2005 - AJAX 
ES 4 -2007
 2008- Node.js Was created 
ES 5- 2008
ES 6  - 2012---2015
ES 7 -2016
..........
Language Learning Path

1.Language fundamentals
2.Functional programming and implementation
3.Object based features
...............................
   
4.Browser App dev - DOM Programming

The first 3 features are used inside browser and node.js apps.

				Language fundamentals


1.type system
2.variables
3.values

Based on data type:

- static programming language/strongly typed programming language

  if language compiler verifies , the type of variable during compile time, those languages
are called static programming language.

  int a=10;
  a="hello" ; compile time error.


- dynamic programming language/weakly typed programming language
 
  if language compiler verifies , the type of variable during runtime time, those languages
are called dynamic/weakly typed programming language.

  var i=10
  i="hello" // no error


JS follows dynamic typed.


1. java  script fundamentals

variable,types, values.

javascript is untyped/dyamic typed language.

keyword variableName=value(literals)

var | let | const | this | variablename=literal

var-es5
let and const -es6 to replace var.

this - for object variables

literals - values: based on literal only the type of variable is decided during runtime.

types of literals

1.string
2.number
3.boolean
4.undefined
5.NaN
6.infinity
7.null
8.function
9.object

types ;

1.string
2.number - number,infinity,NaN
3.boolean
4.undefined
5.function
6.object - null, object
.....................................................................................

Strings:
//literals - strings - "",'',``(back tick notation with string interpolation)

//es 5 keyword not recommended in es 6 apps
//var firstName = "Subramanian"
//es 6 keyword recommended
let firstName = "Subramanian"
let lastName = 'Murugan'
//display -  string concatnation - + , ``
console.log("Name " + firstName + lastName)
console.log("Name ", firstName, lastName)
//es 6 style
console.log(`Name ${firstName} ${lastName}`)
//use case for back tick - multi line strings
let title = 'google'
//multi line in es 5
let doc = "<html>" +
    "<head>" +
    "<title>" + title + "</title>" +
    "</head>" +
    "<body>" +
    "<h1>Hello</h1>" +
    "</body>";
console.log(doc)
//multi line in es 6
let docOne = `<html>
           <head>
            <title>${title}</title>
            </head>
          <body>
            <h1>Hello</h1>
          </body>
        `;
console.log(docOne)

2.Numbers

-all numbers size is 64 bit aka double.

let salary = 10000;
console.log(`Salary ${salary}`);
let totalSalary = salary * 100
console.log(`Total salary ${salary}`);



2.boolean

- 1 bit value eiether 0 or 1;
- offers built in literal value called true/false

let isEnabled = true;
let isShown = false;
console.log(`isEnabled ${isEnabled} isShown ${isShown}`)

3.undefined:
 -undefined; if variable declared but not initalized with any valid literals

let cost;
console.log(`cost ${cost}`);




4.NaN -  Not a Number

 -NaN - not a number; it is numerical error code.during numerical computation, 

js engine
 -may throw error - NaN ; 
 -NaN is not valid value, it is error , need to be fixed if you get.

when you will get NaN.
1.if you do compuation against undefined variables.

//numerical computation against undefined
let qty; //undefined
let price = 100;
let totalPrice = qty * price;
console.log(`Totatl Price is ${totalPrice}`)


2. when you do type conversion ; string to number.
	type conversion; implict and explict.  String to Number

//type conversion:implicit
let x = "10";
let y = 10;
let c = x * y;
console.log(`C ${c}`)

//explicit
let d = parseFloat(x) * y;
console.log(`D ${d}`)

//Nan and type conviersion
x = "$20";
c = x * y;
console.log(`C ${c}`)

d = parseFloat(x) * y;
console.log(`D ${d}`)


Advanced boolean :
...................

What can be true or false?

decision making : if..else

in javascript is every thing is true execept the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */



let isActive = true;

if (isActive) {
    console.log('Active')
} else {
    console.log('inactive')
}

let firstName=""
if (firstName) {
    console.log('Name is Present')
} else {
    console.log('Name is not  Present')
}

let start = 10;
if (start) {
    console.log('start')
} else {
    console.log('no start')
}
/////////////////////////////////////////////////////////////////////////////////////
Operators:
.........
== > compares only values
=== => compares values  + types 

//operators  ==, ===

let a = 10;
let b = 10;
if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}
if (a === b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

a = "10" //type string 
b = 10;

if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}
if (a === b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}
.....................................................................................
//tenary operator : to replace if ...else ladder 

let x = 10;
let y = 10;

x === y ? console.log('equal') : console.log('not equal')

let firstName = '';

let response = firstName ? 'You have firstName' : 'You dont have'
console.log(response);
.....................................................................................
				const 
.....................................................................................

const keyword introduced in e6 to represent readonly values.

let vs const

let is reassignable

let a =10;

a=90;

const b =90;

b=89 //error

const s are highly recommended in large code base where code is shared across the applications and outside, where other code/dev dont want to override.

const firstName = 'Subramanian'
firstName ='foo'
.....................................................................................
			functions
.....................................................................................

//functions

function sayHello(){
    console.log('Hello')
}
sayHello()

//parameters and args

function add(a = 0, b = 0) {
    return a + b
}
console.log(add(10, 10))
console.log(add())

//how initalize the function : literal syntax

const multiply = function (a = 0, b = 0) {
    return a * b;
}
console.log(multiply(10, 10))

//arrow functions
// const div = (a = 0, b = 0) => {
//     return a * b;
// }
const div = (a = 0, b = 0) => a * b
console.log(div(10, 10))


//object creations : constructor patterns and literal pattern

//constructors -  functions 

function Employee(id = 0, name = '', city = '') {
    //instance variables
    this.id = id //1;
    this.name = name// 'Subramanian'
    this.city = city //'Coimbatore'
    //methods
    this.calculate = function () {
        return 1000
    }
}
//create object 
let emp = new Employee(1, 'Subramanian', 'Coimbatore');
console.log(emp.id, emp.name, emp.city, emp.calculate())

class Customer {
    //instance variables
    constructor(id, name, city) {
        this.id = id //1;
        this.name = name// 'Subramanian'
        this.city = city //'Coimbatore'
    }
    //methods
    calculate() {
        return 1000
    }
}
let cust = new Customer(1, 'Subramanian', 'Coimbatore');
console.log(cust.id, cust.name, cust.city, cust.calculate())

literal objects:
//literal object

let config = {
    name: 'myapp',
    template: `<h1>Hello</h1>`,
    // data: function () {
    //     return {
    //         a: 10
    //     }
    // }
    //es 6 syntax 
    data() {
        return {
            a: 10
        }
    },
    methods: {
        hello() {
            return 'hello'
        }
    }
}
console.log(config.name)
console.log(config.template)
console.log(config.data().a)
console.log(config.methods.hello())
/////////////////////////////////////////////////////////////////////////////////////

function createApp(config) {
    return config
}

const app = createApp({
    name: 'myapp',
    template: `<h1>Hello</h1>`,
    data() {
        return {
            a: 10
        }
    },
    methods: {
        hello() {
            return 'hello'
        }
    }
})

console.log(app)
.....................................................................................				  modularity
....................................................................................

How to distribute the code across the files and folders?

java offers various design patterns


1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd
4.ES 6 Module design pattern  = amd + cjs
------------------------------------------------------------
5.System = AMD = CJS + ES 6
6.UMD = NAMESPACE + AMD + CJS = ES 6


ES 6 module design patterns:

exports,exports default => code sharing

import  - code linking

Browsers do not support modules directly.

How to run?

1.with build tools
  webpack,rollup...

2.without build tool

eg:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES 6 APPS</title>
</head>
<body>
    <h1>Es 6 apps</h1>
    <script src="src/index.js"  type="module"></script>
</body>
</html>

src/index.js
import { firstName, lastName } from './mylib.js'
import Options from './components/helloworld.component.js'

function main() {
    console.log(firstName, lastName)
    console.log(Options)
}
main();

src/mylib.js

export const firstName='Subramanian'
export const lastName ='Murugan'

src/components/helloworld.component.js
//how to export object 

export default {
    template: 'Hello template'
}

// const options = {
//     template: 'Hello template'
// }

// export default options;




















































